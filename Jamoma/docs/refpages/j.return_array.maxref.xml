<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>
<c74object name="j.return_array" module="" category="Jamoma">
	<digest>
		Declare an array of output nodes in a Jamoma model
	</digest>
	<description>
		j.return_array declares an array of output nodes in a Jamoma model. It wraps j.return features used to output from a Jamoma model messages to other Jamoma externals (ie. <o>j.receive</o>, <o>j.map</o>). Nodes' name are automatically given an instance number starting from 1.
	</description>
	<discussion><o>j.return</o> is an output node that enables a model to return values. The return value can be updated immediately, or by easing over time. Common types of returns, such as frequency, can be controlled using several different units (e.g. Hz, midinote or midicent) interchangeably.<br/>
    <br/>
    User interfaces can bind to returns remotely. Mappings enable one return to dynamically control the value of another node.<br/>
    <br/>
    Additionally the return enables inter-application communication. The return node is provided with a unique global OSC address, and returns can be declared on the network in order for other applications, such as i-score, to inspect and control models.
  </discussion>
	<metadatalist>
		<metadata name="author">
			Jamoma
		</metadata>
		<metadata name="tag">
			mvc
		</metadata>
		<metadata name="tag">
			Jamoma
		</metadata>
		<metadata name="tag">
			modular
		</metadata>
		<metadata name="tag">
			array
		</metadata>
	</metadatalist>
	<inletlist>
		<inlet id="0" type="any">
			<digest>
				Value of the selected instance(s)
			</digest>
			<description>
				Value of the selected instance(s)
			</description>
		</inlet>
		<inlet id="1" type="int">
			<digest>
				Index
			</digest>
			<description>
				Index of the instance to send value to. (1 to max number of instance. * will send value to all instances)
			</description>
		</inlet>
	</inletlist>
	<outletlist>
		<outlet id="0" type="any">
			<digest>
				Selected instance return's value
			</digest>
			<description>
				Return's value. When <at>format</at> attribute is set to <i>single</i> (default) output will be the selected instance return's value. When <at>format</at> is set to <i>array</i>, output will be a list of all return' value.
			</description>
		</outlet>
		<outlet id="1" type="int">
			<digest>
				Last updated instance number
			</digest>
			<description>
				Last updated instance number			
			</description>
		</outlet>
		<outlet id="2" type="none">
			<digest>
				Dumpout
			</digest>
			<description>
				Dumpout
			</description>
		</outlet>
	</outletlist>
	<objarglist>
		<objarg id="0" name="name" type="symbol" optional="0">
			<digest>
				Output nodes array name
			</digest>
			<description>
				Output nodes array name defined using a bracket-based syntaxe: buffer.[2]/read/done
			</description>
		</objarg>
	</objarglist>
	<methodlist>
		<method name="array">
			<arglist>
				<arg name="value" type="list" optional="0"/>
			</arglist>
			<digest>
				Dispatch a list of values to instances of the returns
			</digest>
			<description>
				Dispatch a list of values to instances of the returns
			</description>
		</method>
		<method name="array/select">
			<arglist>
				<arg name="instance" type="int" optional="0"/>
			</arglist>
			<digest>
				This message select which instance to address
			</digest>
			<description>
				This message select which j.return_array's instance to address
			</description>
		</method>
		<method name="array/resize">
			<arglist>
				<arg name="length" type="int" optional="0"/>
			</arglist>
			<digest>
				Change the number of instances
			</digest>
			<description>
				Change the number of instances
			</description>
		</method>
		<!--Common methods are shared with j.parameter, j.message, j.return and _array version. Please copy paste any change -->
		<method name="bang">
			<arglist/>
			<digest>
				Output current value
			</digest>
			<description>
				A bang at leftmost inlet outputs its current value
			</description>
		</method>
		<method name="int">
			<digest>
				Set and output value
			</digest>
			<description>
				An int at leftmost inlet sets and outputs the value. Depending on the <at>@type</at> attribute, the value might get converted into a float value if the <at>@type</at> attribute is <m>decimal</m> or <m>array</m> or into a string if the <at>@type</at> attribute is <m>string</m>
			</description>
		</method>
		<method name="float">
			<digest>
				Set and output value
			</digest>
			<description>
				A float at leftmost inlet sets and outputs the value. Depending on the <at>@type</at> attribute, the value might get converted into a int value if the <at>@type</at> attribute is <m>integer</m> or into a string if the <at>@type</at> attribute is <m>string</m>
			</description>
		</method>
		<method name="list">
			<!-- <arglist>
        <arg name="input" optional="0" type="list"/>
			<arg name="ramp" type="atom"><description>A pair blabla</description></arg>
			<arg name="unit" type="atom"><description>A list with a unit name</description></arg>
			</arglist> -->
			<digest>
				Set and output value
			</digest>
			<description>
				A list at the leftmost inlet sets and outputs the value. If the <at>@type</at> is <m>decimal</m>, <m>integer</m> or <m>string</m>, only the first list member will be used to set the value, and the type of this list member might be converted to fit the specified <at>@type</at> of the parameter<br/>
        <br/>
        If the <at>@type</at> attribute is <m>decimal</m>, <m>integer</m> or <m>array</m> and ramping is enabled (as specified by <at>@ramp/funcion</at> and <at>@ramp/drive</at>), the two last list members can be used to request a ramp over time to the new value. If so, the second last list member should be the symbol <m>ramp</m> and the last list member specifies the desired ramp time in milliseconds<br/>
        <br/>
        If the <at>@type</at> is <m>decimal</m>, <m>integer</m> or <m>array</m> and a dataspace is used (as specified by <at>@dataspace</at> and <at>@unit</at>), the new value can be set using alternative units. In this case the unit of new value is provided immediately following the numerical value, as either the last list member or as thre third last list member if a ramp is also being requested. If an alternative unit is requested as well as a ramp, the ramping will happen according to the dataspace unit being used temporarily
			</description>
		</method>
		<method name="address">
			<arglist>
				<arg name="address" type="symbol" optional="0"/>
			</arglist>
			<digest>
				Set an array of node names
			</digest>
			<description>
				The message <m>address</m> followed by a symbol containing a number of instances placed in bracket (ie. buffer.[5]/end) sets the name of the nodes. This replaces the names provided initially as an argument to the object and allows to create nodes dynamically
			</description>
		</method>
		<method name="+">
			<arglist>
				<arg name="number of steps" optional="1" type="int"/>
			</arglist>
			<digest>
				Increment the current value
			</digest>
			<description>
				The <m>+</m> message increments the current value by the amount defined using the <at>@stepsize</at> attribute. An optional integer argument to the message specifies how many steps to increase the value by (default <m>1</m>)
			</description>
		</method>
		<method name="-">
			<arglist>
				<arg name="number of steps" optional="1" type="int"/>
			</arglist>
			<digest>
				Decrement the current value
			</digest>
			<description>
				The <m>-</m> message decrements the current value by the amount defined using the <at>@stepsize</at> attribute. An optional integer argument to the message specifies how many steps to decrease the value by (default <m>1</m>)
			</description>
		</method>
		<method name="dec">
			<arglist>
				<arg name="number of steps" optional="1" type="int"/>
			</arglist>
			<digest>
				Decrement the current value
			</digest>
			<description>
				The <m>dec</m> message decrements the current value by the amount defined using the <at>@stepsize</at> attribute. An optional integer argument to the message specifies how many steps to decrease the value by (default <m>1</m>)
			</description>
		</method>
		<method name="dump">
			<arglist/>
			<digest>
				Dump all attribute settings to rightmost outlet
			</digest>
			<description>
				The message <m>dump</m> outputs all attribute settings to rightmost outlet
			</description>
		</method>
		<method name="inc">
			<arglist>
				<arg name="number of steps" optional="1" type="int"/>
			</arglist>
			<digest>
				Increment the current value
			</digest>
			<description>
				The <m>inc</m> message increments the current value by the amount defined using the <at>@stepsize</at> attribute. An optional integer argument to the message specifies how many steps to increase the value by (default <m>1</m>)
			</description>
		</method>
		<method name="init">
			<arglist/>
			<digest>
				Reset to default value
			</digest>
			<description>
				The message <m>init</m> sent to the leftmost inlet reset the current value to the value defined by the <at>@default</at> attribute
			</description>
		</method>
		<method name="anything">
			<arglist>
				<arg name="input" optional="0" type="list"/>
			</arglist>
			<digest>
				If the symbol equals the name of a setable parameters for the current ramp function, the value for that parameter can be updated. Else the message is interpreted as a new value for <o>j.parameter</o>. Depending on the <m>@type</m> it might be converted to one or more decimals (<m>@type decimal</m> or <m>array</m>) or an integer (<m>@type integer</m>).
			</digest>
			<description>
				<!-- TEXT_HERE -->
			</description>
		</method>
	</methodlist>
	<attributelist>
		<attribute name="format" get="1" set="1" type="symbol" size="1">
			<digest>
				Format of the values output: single or array
			</digest>
			<description>
				Format of the output values. When set to <i>single</i> (default), output will be the selected instance received value. When set to <i>array</i>, output will be a list of all instances received value.
			</description>
			<attributelist>
				<attribute name="enumvals" get="1" set="1" type="atom" size="2">
					<enumlist>
						<enum name="single">
							<digest>
								Output the selected instance messages value
							</digest>
							<description>
								Output the selected instance messages value
							</description>
						</enum>
						<enum name="array">
							<digest>
								Output the all instances messages value as a list
							</digest>
							<description>
								Output the all instances messages value as a list
							</description>
						</enum>
					</enumlist>
				</attribute>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enum"/>
			</attributelist>
		</attribute>
		<!--Common attributes are shared with j.parameter, j.message, j.return and _array version. Please copy paste any change -->
		<attribute name="active" get="1" set="1" type="int" size="1">
			<digest>
				Enable node
			</digest>
			<description>
				The <at>@active</at> attribute allows to enable (default: 1) or disable a node
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff"/>
			</attributelist>
		</attribute>
		<attribute name="clipmode" get="1" set="1" type="symbol" size="1">
			<digest>
				Set how values exceeding range will be clipped
			</digest>
			<description>
				The <at>@clipmode</at> attribute defines how values exceeding range will be clipped. Available clipmodes are:
				<ul><li><m>none</m>: when set tot none (default), exceeding values will be left untouched</li><li><m>low</m>: when set to <m>low</m>, values exceeding the lower bound will be clipped. Values exceeding the upper bound will be left untouched</li><li><m>high</m>: when set to <m>high</m>, values exceeding the upper bound will be clipped. Values exceeding the lower bound will be left untouched</li><li><m>both</m>: when set to <m>both</m>, values exceeding lower or upper bounds will be clipped</li><li><m>wrap</m>: when set to <m>wrap</m>, values exceeding lower or upper bound will wrap around the opposite bound</li><li><m>fold</m>: when set to <m>fold</m>, values exceeding lower or upper bound will fold back within the defined range</li></ul>
			</description>
		</attribute>
		<attribute name="dataspace" get="1" set="1" type="symbol" size="1">
			<digest>
				Dataspace used by this node
			</digest>
			<description>
				The <at>@dataspace</at> attribute defines a <link type="vignette" name="Jamoma_dataspace" module="topics">dataspace</link> used by this node. This enables values to be updated using several alternative units interchangeably, such as <m>degree</m> and <m>radian</m> for the <m>angle</m> dataspace. Available dataspaces are:
				<ul><li>none (default)</li><li><m>angle</m></li><li><m>color</m></li><li><m>distance</m></li><li><m>gain</m></li><li><m>orientation</m></li><li><m>position</m></li><li><m>speed</m></li><li><m>temperature</m></li><li><m>time</m></li></ul>
			</description>
		</attribute>
		<attribute name="default" get="1" set="1" type="int" size="1">
			<digest>
				Default value
			</digest>
			<description>
				The <at>@default</at> attribute sets the value to output at the leftmost outlet on model initialization. The default value can be overridden by the default model preset
			</description>
		</attribute>
		<attribute name="description" get="1" set="1" type="symbol" size="1">
			<digest>
				Node description
			</digest>
			<description>
				The <at>@description</at> attribute allows to associate a comment describing what this node controls. The description is used when auto-documenting models.
			</description>
		</attribute>
		<attribute name="priority" get="1" set="1" type="int" size="1">
			<digest>
				Set priority
			</digest>
			<description>
				The <at>@priority</at> attribute controls in what order several values of a state of a Jamoma model will get sent on model initialization or when recalling a preset or cue
			</description>
		</attribute>
		<attribute name="ramp/drive" get="1" set="1" type="symbol" size="1">
			<digest>
				Scheduler driving the ramp
			</digest>
			<description>
				The <at>@ramp/drive</at> attribute defines the scheduler driving the ramp. Available options are:
				<ul><li><m>none</m> (default):  no ramping permitted</li><li><m>max</m>: using the Max scheduler</li><li><m>system</m>: using the system clock</li></ul><i>Note that in Max, it is recommended to use <m>max</m> rather than <m>system</m></i>.
			</description>
		</attribute>
		<attribute name="ramp/function" get="1" set="1" type="symbol" size="1">
			<digest>
				Ramp function
			</digest>
			<description>
				The <at>@ramp/function</at> defines an easing function used for ramping. A wide range of easing functions as well as windowing functions are available. Please refer to the help file for further details
			</description>
		</attribute>
		<attribute name="ramp/function/parameters" get="1" set="0" type="atom" size="1">
			<digest>
				Configurable parameters for the current ramp function
			</digest>
			<description>
				The <at>@ramp/function/parameters</at> is a read-only attribute listing all configurable parameters for the current ramp function. Certain ramp functions as specified by the <m>@ramp/function</m> attribute have additional configurable parameters that can be changed dynamically to modify the shape of the ramping curve. The message <m>ramp/function/parameters</m> cause <o>j.parameter</o>, <o>j.message</o> and <o>j.return</o> to output a list of all such parameters from the rightmost outlet, prepended by the symbol <m>ramp/function/parameters</m>. Refer to the help file for <o>j.ramp</o> for an overview of what functions have additional configurable parameters
			</description>
		</attribute>
		<attribute name="ramp/status" get="1" set="0" type="int" size="1">
			<digest>
				Ramp status
			</digest>
			<description>
				The <at>@ramp/status</at> attribute is a read-only attribute that will be set to <m>1</m> when value is currently performing a ramp, and changed to <m>0</m> when done
			</description>
		</attribute>
		<attribute name="range" get="1" set="1" type="list" size="2">
			<digest>
				Value range
			</digest>
			<description>
				The <at>@range</at> attribute defines the expected range of possible values. Depending on the <at>@clipmode</at> attribute, this might be a recommended or definitive range.
			</description>
		</attribute>
		<attribute name="repetitions/filter" get="1" set="1" type="boolean" size="1">
			<digest>
				Filter out value repetitions
			</digest>
			<description>
				The <at>@repetitions/filter</at> attribute defines whether repetited values will be filtered out or not (default)
			</description>
		</attribute>
		<attribute name="stepsize" get="1" set="1" type="int" size="1">
			<digest>
				Step size when incrementing or decrementing value
      </digest>
			<description>
				The <at>@stepsize</at> attribute defines a step value used when incrementing or decrementing the value using one of the messages <m>+</m>, <m>-</m>, <m>inc</m> or <m>dec</m>
			</description>
		</attribute>
		<attribute name="tags" get="1" set="1" type="atom" size="1">
			<digest>
				Tags associated with this node
			</digest>
			<description>
				The <at>@tags</at> attribute allows to associate a variable number of tags for this node. This helps documenting the parameter, and is also useful when restricting namespace searches using <o>j.namespace</o>.
			</description>
		</attribute>
		<attribute name="type" get="1" set="1" type="symbol" size="1">
			<digest>
				Value type
			</digest>
			<description>
				The <at>@type</at> attribute define the type of the value. Possible types are:
				<ul><li><m>none</m> (j.message and j.return only)</li><li><m>generic</m></li><li><m>boolean</m></li><li><m>decimal</m></li><li><m>integer</m></li><li><m>array</m></li><li><m>string</m></li></ul>
			</description>
		</attribute>
		<attribute name="unit" get="1" set="1" type="symbol" size="1">
			<digest>
				unit used by the node
			</digest>
			<description>
				The <at>@unit</at> attribute defines the <link type="vignette" name="Jamoma_dataspace" module="topics">dataspace</link> unit used by this node. Values will get output according to this unit
			</description>
		</attribute>
		<attribute name="value" get="1" set="1" type="int" size="1">
			<digest>
				Current value
			</digest>
			<description>
				Current node value
			</description>
		</attribute>
	</attributelist>
	<!--EXAMPLE-->
	<examplelist>
		<example caption="" img=""/>
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="j.return"/>
		<seealso name="j.parameter_array"/>
		<seealso name="j.message_array"/>
	</seealsolist>
</c74object>
