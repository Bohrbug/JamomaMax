<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>
<c74object name="j.in" module="" category="Jamoma">
	<digest>
		Jamoma model input
	</digest>
	<description>
		<o>j.in</o> is an input conduit for control signals in a Jamoma model (most often these are Jitter matrices), much like <o>j.in~</o> is for audio signals. It allows to turn on or off messages sent to the model. It also passes parameters or messages value changes sent to the model inlet to the addressed parameter or message
	</description>
	<discussion>When the model's '<at>amenities</at> attribute is set to <i>all</i> or <i>data</i>, <o>j.in</o> automatically creates a few nodes under the containing model namespace so its features can be remotely addressed. Hence it creates a <i>data/active</i> node under the Jamoma model it is created in so that messages sent to the model can be muted. When used in combination with <o>j.out</o>, it also creates a <i>data/bypass</i> node so that messages sent to the model can be muted from <o>j.in</o> outlet and directly sent to paired <o>j.out</o>. It also creates a <i>data/in.&lt;argument&gt;</i> so that model incoming value can be addressed remotely</discussion>
	<metadatalist>
		<metadata name="author">
			Jamoma
		</metadata>
		<metadata name="tag">
			model
		</metadata>
		<metadata name="tag">
			Jamoma
		</metadata>
		<metadata name="tag">
			input
		</metadata>
		<metadata name="tag">
			amenities
		</metadata>
	</metadatalist>
	<inletlist>
		<inlet id="0" type="any">
			<digest>
				Input of the model
			</digest>
			<description>
				Input of the model
			</description>
		</inlet>
	</inletlist>
	<outletlist>
		<outlet id="0" type="any">
			<digest>
				Value sent to the you model core
			</digest>
			<description>
				Value sent to the you model core
			</description>
		</outlet>
		<outlet id="1" type="any">
			<digest>
				Dumpout
			</digest>
			<description>
				Dumpout
			</description>
		</outlet>
	</outletlist>
	<objarglist>
		<objarg id="0" name="instance name" type="string|integer" optional="0">
			<digest>
				Name to subscribe input in Jamoma namespace
			</digest>
			<description>
				An argument set to <o>j.in</o> sets a instance name to subscribe input in Jamoma namespace. The full address of this node will be <i>&lt;model name&gt;/data/in.&lt;argument&gt;</i>
			</description>
		</objarg>
	</objarglist>
	<methodlist>
		<!-- <method name="bang">
			<arglist />
			<digest>
				TEXT_HERE
			</digest>
			<description>
				TEXT_HERE
			</description>
		</method> -->
		<!-- <method name="int">
			<arglist>
				<arg name="ARG_NAME_0" type="int" optional="0" />
			</arglist>
			<digest>
				Integer input
			</digest>
			<description>
				Integer input
			</description>
		</method>
		<method name="float">
			<arglist>
				<arg name="ARG_NAME_0" type="float" optional="0" />
			</arglist>
			<digest>
				Float input
			</digest>
			<description>
				Float input
			</description>
		</method>
		<method name="list">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				List input
			</digest>
			<description>
				List input
			</description>
		</method> -->
		<method name="anything">
			<arglist>
				<arg name="parameter value" type="any" optional="1" />
			</arglist>
			<digest>
				Value to send to the model
			</digest>
			<description>
				When the <at>data/active</at> parameter is set to 1, any message sent to <o>j.in</o> inlet gets output at its outlet so the value can be processed inside your model. When a j.out object sharing the same instance name defined as argument is placed within the model and the internal parameter <at>data/bypass</at> is set to 1 (default = 0), values sent at its inlet will be sent directly to the paired <o>j.out</o> object.<br/><br/>When an incoming symbol and value pair matches a parameter or message in the model, the attached value will get sent to the parameter
			</description>
		</method>
		<method name="dump">
			<arglist/>
			<digest>
				Dump attributes value
			</digest>
			<description>
				The <m>dump</m> message outputs all attributes value out of <o>j.in</o> rightmost outlet
			</description>
		</method>
	</methodlist>
	<attributelist>
		<attribute name="bypass" get="1" set="1" type="int" size="1">
			<digest>
				Send incoming value to paired j.out and turn off output
			</digest>
			<description>
				The <at>bypass</at> attribute turns on or off incoming values output. When set to 0 (default), incoming values are output at <o>j.in</o> leftmost outlet. When set to 1, incoming values are sent to paired <o>j.out</o> object in the model. This attribute is internally linked to the model's parameter <i>data/bypass</i>
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="mute" get="1" set="1" type="int" size="1">
			<digest>
				Mute incoming values
			</digest>
			<description>
				The <at>mute</at> attribute turns on or off incoming value output. This attribute is internally linked to the model's parameter <i>data/active</i>
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="type" get="1" set="1" type="symbol" size="1">
			<digest>
				Set the type of the incoming value
			</digest>
			<description>
				The <at>type</at> attribute sets the type of the incoming values (default = control)
			</description>
		</attribute>
		<!-- <attribute name="output/address" get="1" set="1" type="symbol" size="1">
			<digest>
				j.out address in the namespace to send data to when bypassing the model
			</digest>
			<description>
				The <at>output/address</at> attribute set the <o>j.out</o> address in the namespace to send data to when bypassing the model. It is automatically set from the instance name defined as argument
			</description>
		</attribute> -->
		<!-- <attribute name="type" get="1" set="0" type="symbol" size="1">
			<digest>
				Data type
			</digest>
			<description>
				Data type
			</description>
		</attribute> -->
	</attributelist>
	<examplelist>
		<example caption="" img="" />
	</examplelist>
	<seealsolist>
		<seealso name="j.out"/>
		<seealso name="j.in~"/>
		<seealso name="j.model"/>
	</seealsolist>
</c74object>
