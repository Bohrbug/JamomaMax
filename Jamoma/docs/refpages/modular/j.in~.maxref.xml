<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>
<c74object name="j.in~" module="" category="Jamoma">
	<digest>
		Jamoma model audio input
	</digest>
	<description><o>j.in~</o> is an input conduit for audio signals in a Jamoma model (much like <o>j.in</o> is for control signals). It allows to turn on or off audio signal sent to the model or bypass audio signal processing in the model when used in combination with <o>j.out~</o>. It also passes parameters or messages value changes sent to the model inlet to the addressed parameter or message
	</description>
	<discussion>When the model's '<at>amenities</at> attribute is set to <i>all</i> or <i>audio</i>, <o>j.in~</o> automatically creates a few nodes under the containing model namespace so its features can be remotely addressed. Hence it creates an <i>audio/mute</i> node under the Jamoma model it is created in so that audio signal sent to the model can be silenced. When used in combination with <o>j.out~</o>, it also creates an <i>audio/bypass</i> node so that audio signal sent to the model can be silenced from <o>j.in~</o> outlet and directly sent to paired <o>j.out~</o>. It also creates an <i>audio/in.&lt;argument&gt;</i> so audio signal can be accessed remotely (ie.with <o>j.send~</o> &amp; <o>j.receive~</o> ). When <o>j.in~</o> features are excluded from amenities (ie. <i>@amenities none</i>), these nodes are removed from the namespace and the services are disabled</discussion>
	<metadatalist>
		<metadata name="author">
			Jamoma
		</metadata>
		<metadata name="tag">
			model
		</metadata>
		<metadata name="tag">
			Jamoma
		</metadata>
		<metadata name="tag">
			input
		</metadata>
		<metadata name="tag">
			amenities
		</metadata>
		<metadata name="tag">
			audio
		</metadata>
	</metadatalist>
	<inletlist>
		<inlet id="0" type="signal">
			<digest>
				Input of the model
			</digest>
			<description>
				Input of the model
			</description>
		</inlet>
	</inletlist>
	<outletlist>
		<outlet id="0" type="signal">
			<digest>
				Signal to send to model core
			</digest>
			<description>
				Signal to send to model core
			</description>
		</outlet>
		<outlet id="1" type="any">
			<digest>
				Dumpout
			</digest>
			<description>
				Dumpout
			</description>
		</outlet>
	</outletlist>
	<objarglist>
		<objarg id="0" name="instance name" type="string|integer" optional="0">
			<digest>
				Instance name to subscribe input in Jamoma namespace
			</digest>
			<description>
				An argument set to <o>j.in~</o> sets a instance name to subscribe input in Jamoma namespace. The full address of this node will be <i>&lt;model name&gt;/audio/in.&lt;argument&gt;</i>
			</description>
		</objarg>
	</objarglist>
	<methodlist>
		<!-- <method name="bang">
			<arglist />
			<digest>
				TEXT_HERE
			</digest>
			<description>
				TEXT_HERE
			</description>
		</method> -->
		<!-- <method name="int">
			<arglist>
				<arg name="ARG_NAME_0" type="int" optional="0" />
			</arglist>
			<digest>
				Integer input
			</digest>
			<description>
				Integer input
			</description>
		</method>
		<method name="float">
			<arglist>
				<arg name="ARG_NAME_0" type="float" optional="0" />
			</arglist>
			<digest>
				Float input
			</digest>
			<description>
				Float input
			</description>
		</method>
		<method name="list">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				List input
			</digest>
			<description>
				List input
			</description>
		</method> -->
		<method name="anything">
			<arglist>
				<arg name="parameter value" type="any" optional="1"/>
			</arglist>
			<digest>
				Signal to send to the model
			</digest>
			<description>
				When the <at>audio/mute</at> parameter is set to 0 (default), signal sent to <o>j.in~</o> inlet gets output at its outlet so it can be processed inside your model. When a j<o>.out~</o> object sharing the same instance name defined as argument is placed within the model and the internal parameter <at>audio/bypass</at> is set to 1 (default = 0), signal sent at its inlet will be sent directly to the paired <o>j.out~</o> object.<br/><br/>When an incoming symbol matches a parameter or message in the model, the attached value will get sent to the addressed parameter
			</description>
		</method>
		<method name="dump">
			<arglist/>
			<digest>
				Dump attributes value
			</digest>
			<description>
				The <m>dump</m> message outputs all attributes value out of <o>j.in~</o> rightmost outlet
			</description>
		</method>
	</methodlist>
	<attributelist>
		<attribute name="bypass" get="1" set="1" type="int" size="1">
			<digest>
				Send incoming signal to paired <o>j.out~</o> and turn off output
			</digest>
			<description>
				The <at>bypass</at> attribute turns on or off incoming signal output. When set to 0 (default), incoming signal is output at <o>j.in~</o> leftmost outlet. When set to 1, incoming signal is sent to paired <o>j.out~</o> object in the model. This attribute is internally linked to the model's parameter <i>audio/bypass</i>
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff"/>
			</attributelist>
		</attribute>
		<attribute name="mute" get="1" set="1" type="int" size="1">
			<digest>
				Mute incoming signal
			</digest>
			<description>
				The <at>mute</at> attribute turns on or off incoming signal output. This attribute is internally linked to the model's parameter <i>audio/mute</i>
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff"/>
			</attributelist>
		</attribute>
		<attribute name="type" get="1" set="0" type="symbol" size="1">
			<digest>
				Set the type of input
			</digest>
			<description>
				The <at>type</at> attribute sets the type of the input (default = audio)
			</description>
		</attribute>
	</attributelist>
	<examplelist>
		<example caption="" img="" />
	</examplelist>
	<seealsolist>
		<seealso name="j.out~"/>
		<seealso name="j.in"/>
		<seealso name="j.model"/>
	</seealsolist>
</c74object>
