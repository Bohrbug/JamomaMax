<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>
<!--Data marked TEXT_HERE, INLET_TYPE, OUTLET_TYPE, ARG_NAME and ARG_TYPE need to be filled in-->
<c74object name="j.parameter_array" module="" category="Jamoma">
	<digest>
		Declare an array of model parameters
	</digest>
	<description>
		j.parameter_array declares an array of parameters within a model or patch. Its wraps j.parameter features in a handy external, allowing to manage dynamical sets of parameters of a same kind more easily.
	</description>
	<discussion>
      The parameter is an acces point for controlling the processing of the patch. The parameter value can be updated immediately, or by easing over time. Common types of parameters, such as frequency, can be controlled using several different units (e.g. Hz, midinote or midicent) interchangeably.<br/>
      <br/>
      The value of the parameter can be stored and recalled using model presets. User interfaces can access the parameter remotely. Mappings enable one parameter dynamically control the value of another parameter. Cues can control all parameters in all models. When designing cues, the value can be queried for every single parameter in the patch.<br/>
      <br/>
      Additionally the parameter enables inter-application communication. The parameter is provided with a unique global OSC address. Parameters can also be declared on the network in order for other applications such as i-score to inspect and control models.
    </discussion>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Jamoma
		</metadata>
		<metadata name="tag">
			parameter
		</metadata>
		<metadata name="tag">
			Jamoma
		</metadata>
		<metadata name="tag">
			mvc
		</metadata>
		<metadata name="tag">
			modular
		</metadata>
		<metadata name="tag">
			array
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="any">
			<digest>
				Value of the selected instance(s)
			</digest>
			<description>
				Value of the selected instance(s)
			</description>
		</inlet>
		<inlet id="1" type="int">
			<digest>
				Index
			</digest>
			<description>
				Index of the instance to send value to. (1 to max number of instance. * will send value to all instances)
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="any">
			<digest>
				Selected instance parameter's value
			</digest>
			<description>
				Parameter's value. When <at>format</at> attribute is set to <i>single</i> (default) output will be the selected instance parameter's value. When <at>format</at> is set to <i>array</i>, output will be a list of all parameters' value.
			</description>
		</outlet>
		<outlet id="1" type="int">
			<digest>
				Last updated instance number
			</digest>
			<description>
				Last updated instance number			
			</description>
		</outlet>
		<outlet id="2" type="none">
			<digest>
				Dumpout
			</digest>
			<description>
				Dumpout
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
		<objarg id="0" name="name" type="symbol" optional="0">
			<digest>
				Nodes array name
			</digest>
			<description>
				Nodes array name defined using a bracket-based syntaxe: my/message.[2]
			</description>
		</objarg>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist/>
			<digest>
				Outputs currently stored parameter value
			</digest>
			<description>
				Outputs currently stored parameter value
			</description>
		</method>
		<method name="anything">
			<arglist>
				<arg name="value" type="list" optional="0"/>
			</arglist>
			<digest>
				Store and output current parameter's value.
			</digest>
			<description>
				Store and output current parameter's value.
			</description>
		</method>
		<method name="+">
			<arglist/>
			<digest>
				Increment the selected instance parameter's value by the amount defined by the <at>@stepsize</at> attribute
			</digest>
			<description>
				Increment the selected instance parameter's value by the amount defined by the <at>@stepsize</at> attribute
			</description>
		</method>
		<method name="-">
			<digest>
				Decrement the value by the amount defined by the @stepsize attribute
			</digest>
			<description>
				Decrement the value by the amount defined by the @stepsize attribute
			</description>
		</method>
		<method name="address">
			<arglist>
				<arg name="name" type="symbol" optional="0"/>
			</arglist>
			<digest>
				Define an array of parameters in the namespace. Ex: 'address my/message.[5]'
			</digest>
			<description>
				The address message followed by an osc name containing a number of instances placed in bracket declares an array of parameters in the namespace. Ex: 'address my/message.[5]'
			</description>
		</method>
		<method name="array">
			<arglist>
				<arg name="value" type="list" optional="0"/>
			</arglist>
			<digest>
				Dispatch a list of values to instances of the parameters
			</digest>
			<description>
				Dispatch a list of values to instances of the parameters
			</description>
		</method>
		<method name="array/select">
			<arglist>
				<arg name="instance" type="int" optional="0"/>
			</arglist>
			<digest>
				This message select which instance to address
			</digest>
			<description>
				This message select which j.parameter_array's instance to address
			</description>
		</method>
		<method name="array/resize">
			<arglist>
				<arg name="length" type="int" optional="0"/>
			</arglist>
			<digest>
				Change the number of instances
			</digest>
			<description>
				Change the number of instances
			</description>
		</method>
		<method name="dec">
			<arglist/>
			<digest>
				Decrement the value by the amount defined by the <at>stepsize</at> attribute
			</digest>
			<description>
				Decrement the value by the amount defined by the <at>stepsize</at> attribute
			</description>
		</method>
		<method name="dump">
			<arglist/>
			<digest>
				Dump
			</digest>
			<description>
				Dum all attributes values
			</description>
		</method>
		<method name="inc">
			<arglist/>
			<digest>
				Increment the value by the amount defined by the <at>stepsize</at> attribute
			</digest>
			<description>
				Increment the value by the amount defined by the <at>stepsize</at> attribute
			</description>
		</method>
		<method name="init">
			<arglist/>
			<digest>
				Reset the selected j.parameter instance to its default value
			</digest>
			<description>
				Reset the selected j.parameter instance to its default value
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="active" get="1" set="1" type="int" size="1">
			<digest>
				Enable or disable parameter instances
			</digest>
			<description>
				Enable or disable parameter instances
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff"/>
			</attributelist>
		</attribute>
		<attribute name="clipmode" get="1" set="1" type="symbol" size="1">
			<digest>
				Set how values exceeding range will be clipped
			</digest>
			<description>
				Set how values exceeding range will be clipped. Available clipmodes are <m>none</m>, <m>low</m>, <m>high</m>, <m>both</m>, <m>wrap</m> and <m>fold</m>.
			</description>
		</attribute>
		<attribute name="dataspace" get="1" set="1" type="symbol" size="1">
			<digest>
				Dataspace used by the parameter
			</digest>
			<description>
				Dataspace used by the parameter. This enables parameter values to be updated using several alternative units interchangeably, such as <m>degree</m> and <m>radian</m> for the <m>angle</m> dataspace. Available dataspaces are:
				<ul>
					<li><m>none</m> (default)</li>
					<li><m>angle</m></li>
					<li><m>color</m></li>
					<li><m>distance</m></li>
					<li><m>gain</m></li>
					<li><m>orientation</m></li>
					<li><m>position</m></li>
					<li><m>speed</m></li>
					<li><m>temperature</m></li>
					<li><m>time</m></li>
				</ul>
				<br/>Note that dataspace and units conversion features are enable when <at>type</at> attribute is set to <i>interger</i>, <i>decimal</i> or <i>array</i>
			</description>
		</attribute>
		<attribute name="default" get="1" set="1" type="int" size="1">
			<digest>
				Defaults value
			</digest>
			<description>
				Defaults value output by <o>j.parameter_array</o> on model initialization. The defaults value can be overridden by the default model preset.
			</description>
		</attribute>
		<attribute name="description" get="1" set="1" type="symbol" size="1">
			<digest>
				Node description
			</digest>
			<description>
				Description of what this node controls. The description is used when auto-documenting models.
			</description>
		</attribute>
		<attribute name="format" get="1" set="1" type="symbol" size="1">
			<digest>
				Format of the values output: single or array
			</digest>
			<description>
				Format of the values output. When set to <i>single</i> (default), output will be the selected instance parameter's value. When set to <i>array</i>, output will be a list of all instances parameter's value.
			</description>
			<attributelist>
				<attribute name="enumvals" get="1" set="1" type="atom" size="2">
					<enumlist>
						<enum name="single">
							<digest>
								Output the selected instance parameter's value
							</digest>
							<description>
								Output the selected instance parameter's value
							</description>
						</enum>
						<enum name="array">
							<digest>
								Output the all instances parameter's value as a list
							</digest>
							<description>
								Output the all instances parameter's value as a list
							</description>
						</enum>
					</enumlist>
				</attribute>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enum"/>
			</attributelist>
		</attribute>
		<attribute name="priority" get="1" set="1" type="int" size="1">
			<digest>
				Set priority
			</digest>
			<description>
				Priority controls in what order several <o>j.parameter</o> obejcts within the same model will initialise and update in response to presets and cues.
			</description>
		</attribute>
		<attribute name="ramp/drive" get="1" set="1" type="symbol" size="1">
			<digest>
				Set the scheduler driving the ramp
			</digest>
			<description>
				The <at>@ramp/drive</at> attribute defines the scheduler driving the ramp. Available options are:
				<ul><li><m>none</m> (default):  no ramping permitted</li><li><m>max</m>: using the Max scheduler</li><li><m>system</m>: using the system clock</li><li><m>external</m>: value is output with ramp time appended so it can be processed out of <o>j.parameter</o> (ie. using Max's <o>line~</o>)</li></ul><i>Note that in Max, it is recommended to use <m>max</m> rather than <m>system</m></i>.
			</description>
		</attribute>
		<attribute name="ramp/function" get="1" set="1" type="symbol" size="1">
			<digest>
				Function to be used for ramping
			</digest>
			<description>
				Sets what easing function to use for ramping. A wide range of easing functions as well as windowing functions are available. Please refer to the help file for further details.
			</description>
		</attribute>
		<attribute name="ramp/function/parameters" get="1" set="0" type="atom" size="1">
			<digest>
				Get list of configurable parameters for the current ramp function
			</digest>
			<description>
				Get list of configurable parameters for the current ramp function. Certain ramp functions as specified by the <m>@ramp/function</m> attribute have additional configurable parameters that can be changed dynamically to modify the shape of the ramping curve. The message <m>ramp/function/parameters</m> cause <o>j.parameter</o> to output a list of all such parameters from the rightmost outlet, prepended by the symbol <m>ramp/function/parameters</m>. Refer to the help file for <o>j.ramp</o> for an overview of what functions have additional configurable parameters.
			</description>
		</attribute>
		<attribute name="range" get="1" set="1" type="atom" size="1">
			<digest>
				The range of values
			</digest>
			<description>
				The expected range of values for this parameter. Depending on <m>@clipmode</m> this might be a recommended or definitive range.
			</description>
		</attribute>
		<attribute name="repetitions/filter" get="1" set="1" type="int" size="1">
			<digest>
				Filtering of value repetitions
			</digest>
			<description>
				Set whether to filter out value repetitions (<m>1</m>) or not (<m>0</m>).
			</description>
		</attribute>
		<attribute name="stepsize" get="1" set="1" type="int" size="1">
			<digest>
				Step size when incrementing or decrementing the parameter value
      </digest>
			<description>
				Stepsize used when incrementing or decrementing the value using one of the messages <m>+</m>, <m>-</m>, <m>inc</m> or <m>dec</m>.
			</description>
		</attribute>
		<attribute name="tags" get="1" set="1" type="atom" size="1">
			<digest>
				Tags associated with the parameters
			</digest>
			<description>
				Tags associated with the parameters. This helps documenting the parameters, and is also useful when restricting namespace searches using <o>j.namespace</o>.
			</description>
		</attribute>
		<attribute name="type" get="1" set="1" type="symbol" size="1">
			<digest>
				Datatype of the parameters
			</digest>
			<description>
				Datatype of the parameters (decimal, integer, boolean, string, array, generic)<br/>Note that value of type <m>integer</m>, <m>decimal</m> and <m>array</m> enable to use a <at>dataspace</at> and <at>unit</at> as well as <at>ramp</at> features.
			</description>
			<attributelist>
				<attribute name="enumvals" get="1" set="1" type="atom" size="6">
			<enumlist>
				<enum name="generic">
					<digest>
						Define a value of any kind
					</digest>
					<description>
						Stored and output value will be of any kind (including lists combining integers, decimals and symbols)
					</description>
				</enum>
				<enum name="boolean">
					<digest>
						Define a 0 or 1 value
					</digest>
					<description>
						Stored and output value will be either 0 or 1
					</description>
				</enum>
				<enum name="integer">
					<digest>
						Define an integer (<i>int</i>) value
					</digest>
					<description>
Stored and output value will be an integer number (<i>int</i>). Other values get converted to integer					</description>
				</enum>
				<enum name="decimal">
					<digest>
						Define a decimal (<i>float</i>) value
					</digest>
					<description>
						Stored and output value will be a decimal number (<i>float</i>)
					</description>
				</enum>
				<enum name="array">
					<digest>
						Define an array of decimal (<i>float</i>) value
					</digest>
					<description>
						Stored and output value will be a list of decimal numbers (<i>float</i>)
					</description>
				</enum>
				<enum name="string">
					<digest>
						Define a string (<i>symbol</i>) value
					</digest>
					<description>
						Stored and output value will be a string (<i>symbol</i>)
					</description>
				</enum>
			</enumlist>
		</attribute>
		<attribute name="style" get="1" set="1" type="symbol" size="1" value="enum"/>
		
	</attributelist>
		</attribute>
		<attribute name="value" get="1" set="1" type="int" size="1">
			<digest>
				Current parameters value
			</digest>
			<description>
				Current parameters value
			</description>
		</attribute>
		<!-- <attribute name="service" get="1" set="1" type="symbol" size="1">
			<digest>
				TEXT_HERE
			</digest>
			<description>
				TEXT_HERE
			</description>
		</attribute> -->
	</attributelist>
	<!--EXAMPLE-->
	<examplelist>
		<example caption="" img=""/>
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="j.parameter"/>
		<seealso name="j.message_array"/>
		<seealso name="j.return_array"/>
		<seealso name="j.remote_array"/>
		<seealso name="Jamoma_dataspace" type="vignette" module="topics"/>
	</seealsolist>
</c74object>
