<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>
<c74object name="j.out" module="modular" category="Jamoma">
	<digest>
		Jamoma model output
	</digest>
	<description><o>j.out</o> is an output conduit for control signals in a Jamoma model (most often these are Jitter matrices), much like <o>j.out~</o> is for audio signals. It allows to turn on or off messages output from the model or bypass the value processing in the model when used in combination with <o>j.in</o>
	</description>
	<discussion>When the model's '<at>amenities</at> attribute is set to <i>all</i> or <i>data</i>, <o>j.out</o> automatically creates a few nodes under the containing model namespace so its features can be remotely addressed. Hence it creates a <i>data/active</i> node under the Jamoma model it is created in so that messages sent from the model can be muted. When used in combination with <o>j.in</o>, it also creates a <i>data/bypass</i> node so that messages sent to the model can be muted from <o>j.in</o> outlet and directly sent to paired <o>j.out</o>. It also creates a <i>data/out.&lt;argument&gt;</i> so that values sent from the model can be listened remotely. <br/><br/>When j.in/out features are excluded from amenities (ie. <i>@amenities none</i>), these nodes are removed from the namespace and the services are disabled</discussion>
	<metadatalist>
		<metadata name="author">
			Jamoma
		</metadata>
		<metadata name="tag">
			model
		</metadata>
		<metadata name="tag">
			Jamoma
		</metadata>
		<metadata name="tag">
			output
		</metadata>
		<metadata name="tag">
			amenities
		</metadata>
	</metadatalist>
	<inletlist>
		<inlet id="0" type="any">
			<digest>
				Values to output from the model
			</digest>
			<description>
				Values to output from the model
			</description>
		</inlet>
	</inletlist>
	<outletlist>
		<outlet id="0" type="any">
			<digest>
				Model output
			</digest>
			<description>
				Model output
			</description>
		</outlet>
		<outlet id="1" type="any">
			<digest>
				Dumpout
			</digest>
			<description>
				Dumpout
			</description>
		</outlet>
	</outletlist>
	<objarglist>
		<objarg id="0" name="instance name" type="string|integer" optional="0">
			<digest>
				Instance name to subscribe output in Jamoma namespace
			</digest>
			<description>
				An argument set to <o>j.out</o> sets a instance name to subscribe output in Jamoma namespace. The full address of this node will be <i>&lt;model name&gt;/data/out.&lt;argument&gt;</i>
			</description>
		</objarg>
	</objarglist>
	<methodlist>
		<!-- <method name="bang">
			<arglist />
			<digest>
				TEXT_HERE
			</digest>
			<description>
				TEXT_HERE
			</description>
		</method> -->
		<!-- <method name="int">
			<arglist>
				<arg name="ARG_NAME_0" type="int" optional="0" />
			</arglist>
			<digest>
				Integer input
			</digest>
			<description>
				Integer input
			</description>
		</method>
		<method name="float">
			<arglist>
				<arg name="ARG_NAME_0" type="float" optional="0" />
			</arglist>
			<digest>
				Float input
			</digest>
			<description>
				Float input
			</description>
		</method>
		<method name="list">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				List input
			</digest>
			<description>
				List input
			</description>
		</method> -->
		<method name="anything">
			<arglist>
				<arg name="value" type="any" optional="1"/>
			</arglist>
			<digest>
				Value to output from the model
			</digest>
			<description>
				When the <at>data/active</at> parameter is set to 1 (default), any message sent to <o>j.out</o> inlet gets output from your model. When a j<o>.in</o> object sharing the same instance name defined as argument is placed within the model and the internal parameter <at>data/bypass</at> is set to 1 (default = 0), values sent at <o>j.in</o> inlet will be received directly by the paired <o>j.out</o> object.<br/><br/>
			</description>
		</method>
		<method name="dump">
			<arglist/>
			<digest>
				Dump attributes value
			</digest>
			<description>
				The <m>dump</m> message outputs all attributes value out of <o>j.out</o> rightmost outlet
			</description>
		</method>
	</methodlist>
	<attributelist>
		<attribute name="freeze" get="1" set="1" type="int" size="1">
			<digest>
				(deprecated)
			</digest>
			<description>
				(deprecated)
			</description>
		</attribute>
		<attribute name="gain" get="1" set="1" type="int" size="1">
			<digest>
				(deprecated)
			</digest>
			<description>
				(deprecated)
			</description>
		</attribute>
		<attribute name="mix" get="1" set="1" type="int" size="1">
			<digest>
				(deprecated)
			</digest>
			<description>
				(deprecated)
			</description>
		</attribute>
		<attribute name="mute" get="1" set="1" type="int" size="1">
			<digest>
				Mute output
			</digest>
			<description>
				The <at>mute</at> attribute turns on or off value output. This attribute is internally linked to the model's parameter <i>data/active</i>
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff"/>
			</attributelist>
		</attribute>
		<attribute name="type" get="1" set="1" type="symbol" size="1">
			<digest>
				Set the type of the outcoming value
			</digest>
			<description>
				The <at>type</at> attribute sets the type of the outcoming values (default = control)
			</description>
		</attribute>
		<!-- <attribute name="output/address" get="1" set="1" type="symbol" size="1">
			<digest>
				j.out address in the namespace to send data to when bypassing the model
			</digest>
			<description>
				The <at>output/address</at> attribute set the <o>j.out</o> address in the namespace to send data to when bypassing the model. It is automatically set from the instance name defined as argument
			</description>
		</attribute> -->
		<!-- <attribute name="type" get="1" set="0" type="symbol" size="1">
			<digest>
				Data type
			</digest>
			<description>
				Data type
			</description>
		</attribute> -->
	</attributelist>
	<examplelist>
		<example caption="" img=""/>
	</examplelist>
	<seealsolist>
		<seealso name="j.in" type="refpage" module="modular"/>
		<seealso name="j.out~" type="refpage" module="modular"/>
		<seealso name="j.model" type="refpage" module="modular"/>
	</seealsolist>
</c74object>
